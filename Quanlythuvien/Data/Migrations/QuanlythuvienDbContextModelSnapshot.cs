// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quanlythuvien.Models;

#nullable disable

namespace Quanlythuvien.Data.Migrations
{
    [DbContext(typeof(QuanlythuvienDbContext))]
    partial class QuanlythuvienDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsAuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BooksBookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsAuthorId", "BooksBookId");

                    b.HasIndex("BooksBookId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adminId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("AdminId")
                        .HasName("PK__Admins__AD0500A654D7C909");

                    b.HasIndex(new[] { "Email" }, "UQ__Admins__AB6E6164CDFBC1C0")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "UQ__Admins__F3DBC572C9997B8D")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("authorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("authorName");

                    b.Property<string>("Bio")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("bio");

                    b.HasKey("AuthorId")
                        .HasName("PK__Authors__8E2731B9443EFDF0");

                    b.HasIndex(new[] { "AuthorName" }, "UQ__Authors__3D70AA69DFF44EBF")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("DownloadLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("downloadLink");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("imagePath");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("location");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("publisherId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<int?>("YearPublished")
                        .HasColumnType("int")
                        .HasColumnName("yearPublished");

                    b.HasKey("BookId")
                        .HasName("PK__Books__8BE5A10D5AE877E2");

                    b.HasIndex("PublisherId");

                    b.HasIndex(new[] { "Title" }, "IX_Books_Title");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Quanlythuvien.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("bookId");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("authorId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId", "AuthorId")
                        .HasName("PK__BookAuth__0307D216E1C99C57");

                    b.HasIndex(new[] { "AuthorId" }, "IX_BookAuthors_AuthorId");

                    b.HasIndex(new[] { "BookId" }, "IX_BookAuthors_BookId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("Quanlythuvien.Models.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("bookId");

                    b.Property<int>("CateId")
                        .HasColumnType("int")
                        .HasColumnName("cateId");

                    b.HasKey("BookId", "CateId")
                        .HasName("PK__BookCate__D16D15D3AB546749");

                    b.HasIndex(new[] { "BookId" }, "IX_BookCategories_BookId");

                    b.HasIndex(new[] { "CateId" }, "IX_BookCategories_CateId");

                    b.ToTable("BookCategories", (string)null);
                });

            modelBuilder.Entity("Quanlythuvien.Models.Borrowed", b =>
                {
                    b.Property<int>("BorrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("borrowId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("bookId");

                    b.Property<string>("BookStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bookStatus");

                    b.Property<DateOnly?>("BorrowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("borrowDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("dueDate");

                    b.Property<decimal?>("FineAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("fineAmount");

                    b.Property<int?>("LibraId")
                        .HasColumnType("int")
                        .HasColumnName("libraId");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("returnDate");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.HasKey("BorrowId")
                        .HasName("PK__Borrowed__73982486F6330C42");

                    b.HasIndex("LibraId");

                    b.HasIndex(new[] { "BookId" }, "IX_Borrowed_BookId");

                    b.HasIndex(new[] { "StudentId" }, "IX_Borrowed_StudentId");

                    b.ToTable("Borrowed", null, t =>
                        {
                            t.HasTrigger("TRG_Borrowed_CalculateFine");

                            t.HasTrigger("TRG_Borrowed_Insert");

                            t.HasTrigger("TRG_Borrowed_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Quanlythuvien.Models.Category", b =>
                {
                    b.Property<int>("CateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CateId"));

                    b.Property<string>("CateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cateName");

                    b.HasKey("CateId")
                        .HasName("PK__Categori__A88B4DE4970CD8AE");

                    b.HasIndex(new[] { "CateName" }, "UQ__Categori__BD4278AEDBEE9180")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Quanlythuvien.Models.Fine", b =>
                {
                    b.Property<int>("FineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fineId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FineId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int?>("BorrowId")
                        .HasColumnType("int")
                        .HasColumnName("borrowId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("paid");

                    b.Property<DateOnly?>("PaidDate")
                        .HasColumnType("date")
                        .HasColumnName("paidDate");

                    b.HasKey("FineId")
                        .HasName("PK__Fines__76725B3A99BCEDA4");

                    b.HasIndex("BorrowId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Librarian", b =>
                {
                    b.Property<int>("LibraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("libraId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraId"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullname");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hireDate");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("LibraId")
                        .HasName("PK__Libraria__1C1CFE1020271DB3");

                    b.HasIndex(new[] { "Email" }, "UQ__Libraria__AB6E6164684D619E")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "UQ__Libraria__F3DBC572CC014602")
                        .IsUnique();

                    b.ToTable("Librarians");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("publisherId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("publisherName");

                    b.HasKey("PublisherId")
                        .HasName("PK__Publishe__7E8A0D96A30BB380");

                    b.HasIndex(new[] { "PublisherName" }, "UQ__Publishe__22E7F395FD1B80E2")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__CD98462A9C11AFE1");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__B19478616DCA5C52")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("StudentId")
                        .HasName("PK__Students__4D11D63C8C29625F");

                    b.HasIndex(new[] { "Email" }, "IX_Students_Email");

                    b.HasIndex(new[] { "Email" }, "UQ__Students__AB6E6164BAAFFB05")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "UQ__Students__F3DBC5725A8DB598")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Quanlythuvien.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userRoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("adminId");

                    b.Property<int?>("LibraId")
                        .HasColumnType("int")
                        .HasColumnName("libraId");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.HasKey("UserRoleId")
                        .HasName("PK__UserRole__CD3149CC1890F14B");

                    b.HasIndex("AdminId");

                    b.HasIndex("LibraId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StudentId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Quanlythuvien.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quanlythuvien.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quanlythuvien.Models.Book", b =>
                {
                    b.HasOne("Quanlythuvien.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Book_Publisher");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Quanlythuvien.Models.BookAuthor", b =>
                {
                    b.HasOne("Quanlythuvien.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookAuthors_Authors");

                    b.HasOne("Quanlythuvien.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookAuthors_Books");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Quanlythuvien.Models.BookCategory", b =>
                {
                    b.HasOne("Quanlythuvien.Models.Book", "Books")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookCategories_Books");

                    b.HasOne("Quanlythuvien.Models.Category", "Categories")
                        .WithMany("BookCategories")
                        .HasForeignKey("CateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BookCategories_Categories");

                    b.Navigation("Books");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Borrowed", b =>
                {
                    b.HasOne("Quanlythuvien.Models.Book", "Book")
                        .WithMany("Borroweds")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Borrowed_Books");

                    b.HasOne("Quanlythuvien.Models.Librarian", "Libra")
                        .WithMany("Borroweds")
                        .HasForeignKey("LibraId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Borrowed_Librarians");

                    b.HasOne("Quanlythuvien.Models.Student", "Student")
                        .WithMany("Borroweds")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Borrowed_Students");

                    b.Navigation("Book");

                    b.Navigation("Libra");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Fine", b =>
                {
                    b.HasOne("Quanlythuvien.Models.Borrowed", "Borrow")
                        .WithMany("Fines")
                        .HasForeignKey("BorrowId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Fines_Borrowed");

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("Quanlythuvien.Models.UserRole", b =>
                {
                    b.HasOne("Quanlythuvien.Models.Admin", "Admin")
                        .WithMany("UserRoles")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_UserRoles_Admins");

                    b.HasOne("Quanlythuvien.Models.Librarian", "Libra")
                        .WithMany("UserRoles")
                        .HasForeignKey("LibraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_UserRoles_Librarians");

                    b.HasOne("Quanlythuvien.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("Quanlythuvien.Models.Student", "Student")
                        .WithMany("UserRoles")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_UserRoles_Students");

                    b.Navigation("Admin");

                    b.Navigation("Libra");

                    b.Navigation("Role");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Admin", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookCategories");

                    b.Navigation("Borroweds");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Borrowed", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Category", b =>
                {
                    b.Navigation("BookCategories");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Librarian", b =>
                {
                    b.Navigation("Borroweds");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Quanlythuvien.Models.Student", b =>
                {
                    b.Navigation("Borroweds");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
